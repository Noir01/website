---  
interface Props {  
  title: string;  
  description?: string;  
}  

const { title, description } = Astro.props;  
---  

<!doctype html>  
<html lang="en">  
  <head>  
    <meta charset="UTF-8" />  
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />  
    <title>{title}</title>  
    {description && <meta name="description" content={description} />}  
  </head>  
  <body>  
    <div id="particle-container">  
      {Array.from({ length: 137 }).map((_, i) => (  
        <div class="particle" />  
      ))}  
    </div>  

    <div class="page-content">  
      <slot />  
    </div>  

    <script is:inline type="module">  
      import "..interactive-particles";
      if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        await import("../interactive-particles.js");
      }
    </script>  
  </body>  
</html>  

<style lang="scss" is:global>

body {
  background: #121212;
  color: #e0e0e0
}
#particle-container {  
  position: fixed;  
  inset: 0;  
  z-index: -2;  
}  

.particle {  
  position: absolute;  
  border-radius: 50%;  
  z-index: -1;
  animation: none;
}  

.page-content {  
  display: flex;  
  justify-content: center;  
  align-items: center;  
  min-height: 100vh;  
}  

@media (prefers-reduced-motion: no-preference) {
  @for $i from 1 through 137 {  
    @keyframes particle-animation-#{$i} {  
      100% {  
        transform: translate3d((random(90) * 1vw), (random(90) * 1vh), 0);  
      }  
    }  

    .particle:nth-child(#{$i}) {  
      $duration: 30 + random(60);  
      animation: particle-animation-#{$i} #{$duration}s infinite;  
      $size: random(5) + 5 + px;  
      opacity: calc(random(100) / 100);  
      width: $size;  
      height: $size;  
      animation-delay: -$i * 0.2s;  
      transform: translate3d((random(90) * 1vw), (random(90) * 1vh), 0);  
      background: hsl(random(360), 70%, 50%);  
    }  
  }
} 
</style>