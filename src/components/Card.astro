---  
interface Props {  
  title?: string;
  size?: number;
}  
const { title, size = 1} = Astro.props;  
---  

<div class="card" style={`--scale: ${size}`}>
  {title && <h2>{title}</h2>}
  <slot />
</div>
<script is:inline>
  if (typeof window !== 'undefined') {
    const card = document.querySelector('.card');
    let played = false;
    const canAnimate = () =>
      window.matchMedia('(prefers-reduced-motion: no-preference)').matches &&
      window.matchMedia('(min-width: 700px)').matches &&
      window.matchMedia('(min-height: 400px)').matches;
    card.addEventListener('mouseenter', () => {
      if (played || !canAnimate()) return;
      played = true;
      card.classList.add('hover-spin');
    });
  }
</script>

<style>
.card {
  background: #1e1e1e;
  color: #e0e0e0;
  /* scaleable dimensions */
  width: calc(80vw * var(--scale));
  max-width: calc(600px * var(--scale));
  padding: calc(2rem * var(--scale));
  border-radius: calc(8px * var(--scale));
  box-shadow: 0 4px 12px rgba(0,0,0,0.5);
  aspect-ratio: 3 / 2;
  text-align: center;
  margin: 0 auto;

  /* start un-rotated */
  transform: rotate(0deg);
  transform-origin: center;
}

@media (prefers-reduced-motion: no-preference) and (min-width: 700px) and (min-height: 400px) {
  .card.hover-spin {
    animation: spin-jitter 6s ease-out forwards;
  }
}

@keyframes spin-jitter {
  0%   { transform: rotate(0deg); }
  80%  { transform: rotate(360deg); }
  85%  { transform: rotate(375deg); }
  90%  { transform: rotate(345deg); }
  95%  { transform: rotate(375deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 600px) {
  .card {
    width: 100vw;
    height: 100vh;
    max-width: none;
    aspect-ratio: auto;
    margin: 0;
    border-radius: 0;
    padding: calc(1rem * var(--scale));
    transform: none !important;
  }
}
</style>
